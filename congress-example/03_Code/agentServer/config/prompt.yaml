selector_prompt:
  description: >
    This is the last message in the conversation: 
    """
    {last_message}
    """

    You are given the following agents: {agent_names}

    Based on the content of the last message AND on your logical reasoning you should output the name of the agent that needs to be called.
    For this you first look at the last message, and see which agents are mentioned. Then you look at the most important task that needs to be done.
    Then you verify that the agent(s) mentioned ACTUALLY CAN do the requested task. Here are some important things:

    - only the 'committee_specialist' can retrieve committee rosters
    - the 'congress_member_specialist' can retrieve detailed information about KNOWN congressmen (not fetch a roster)

    Then before outputting the agent:
    If the last message corresponds to a specialist returning his findings, return "orchestrator"
    If the last message corresponds to the orchestrator asking all of the agents for confirmation return a random agent name.
    In all other cases reason from the content of the last message, which of the agents should be called and the previous logical reasoning.
    Return SOLELY thename of the agent that should be called next. (i.e. "committee_specialist")

planning_prompt:
  description: >
    You have attempted to call a tool without first providing a plan. 
    You MUST first provide a step-by-step plan as a bulleted list. 
    After the text of your plan, you MUST re-issue the same tool call you just attempted, and WITH the arguments according to the tool description and the plan. 
    Your final response must include BOTH the textual plan AND the `tool_calls` data structure.

arguments_prompt:
  description: >
    {warning}
    Our agent wants to call the following tool of our Model Context Protocol Server: {tool_name}
    For this he provided the following arguments: {sent_arguments}
    We checked them and they are false in structure and possibly wrong in content. Here is the expected STRUCTURE description of the arguments (not the content)\n
    """
    {description}
    """
    \n
    Again: The arguments in the descriptions ARE JUST EXAMPLES FOR THE STRUCTURE. Now you will need to infer the correct content of the arguments by the last instruction here:

    And this is the last instruction that was given to the agent:
    """
    {last_message}
    """

    Infer the correct arguments for this tool call using the structure in the description and the last instruction.
    Return ONLY the JSON object of arguments for this tool. Do not include any extra text.

    DO NOT MAKE UP ARGUMENTS. ONLY USE THE LAST INSTRUCTION AND THE DESCRIPTION.